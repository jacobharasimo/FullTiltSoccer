#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FullTiltSoccer")]
	public partial class MainDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCamp(Camp instance);
    partial void UpdateCamp(Camp instance);
    partial void DeleteCamp(Camp instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCmsData(CmsData instance);
    partial void UpdateCmsData(CmsData instance);
    partial void DeleteCmsData(CmsData instance);
    partial void InsertCoachesCorner(CoachesCorner instance);
    partial void UpdateCoachesCorner(CoachesCorner instance);
    partial void DeleteCoachesCorner(CoachesCorner instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertTournament(Tournament instance);
    partial void UpdateTournament(Tournament instance);
    partial void DeleteTournament(Tournament instance);
    #endregion
		
		public MainDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FullTiltSoccerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Camp> Camps
		{
			get
			{
				return this.GetTable<Camp>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<CmsData> CmsDatas
		{
			get
			{
				return this.GetTable<CmsData>();
			}
		}
		
		public System.Data.Linq.Table<CoachesCorner> CoachesCorners
		{
			get
			{
				return this.GetTable<CoachesCorner>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Raiting> Raitings
		{
			get
			{
				return this.GetTable<Raiting>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<Tournament> Tournaments
		{
			get
			{
				return this.GetTable<Tournament>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllCampsBeforeDate")]
		public ISingleResult<GetAllCampsBeforeDateResult> GetAllCampsBeforeDate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date);
			return ((ISingleResult<GetAllCampsBeforeDateResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFellowRegionsByRegion")]
		public ISingleResult<GetFellowRegionsByRegionResult> GetFellowRegionsByRegion([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string region)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region);
			return ((ISingleResult<GetFellowRegionsByRegionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllCampsPostsByUser")]
		public ISingleResult<GetAllCampsPostsByUserResult> GetAllCampsPostsByUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<GetAllCampsPostsByUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllCoachesCornerByRegion")]
		public ISingleResult<GetAllCoachesCornerByRegionResult> GetAllCoachesCornerByRegion([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string region)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region);
			return ((ISingleResult<GetAllCoachesCornerByRegionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllCoachesCornerPostsByUser")]
		public ISingleResult<GetAllCoachesCornerPostsByUserResult> GetAllCoachesCornerPostsByUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<GetAllCoachesCornerPostsByUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllCountries")]
		public ISingleResult<GetAllCountriesResult> GetAllCountries()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetAllCountriesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllRegionsByCountry")]
		public ISingleResult<GetAllRegionsByCountryResult> GetAllRegionsByCountry([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="VarChar(50)")] string country)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), country);
			return ((ISingleResult<GetAllRegionsByCountryResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllTournamentPostsByUser")]
		public ISingleResult<GetAllTournamentPostsByUserResult> GetAllTournamentPostsByUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<GetAllTournamentPostsByUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllTournamentsByRegion")]
		public ISingleResult<GetAllTournamentsByRegionResult> GetAllTournamentsByRegion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Region", DbType="VarChar(50)")] string region)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region);
			return ((ISingleResult<GetAllTournamentsByRegionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCmsData")]
		public ISingleResult<GetCmsDataResult> GetCmsData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<GetCmsDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTournamentRaitingFromUser")]
		public ISingleResult<GetTournamentRaitingFromUserResult> GetTournamentRaitingFromUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tournamentID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tournamentID, userID);
			return ((ISingleResult<GetTournamentRaitingFromUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAverageTournamentRating")]
		public ISingleResult<GetAverageTournamentRatingResult1> GetAverageTournamentRating1([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tournamentID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tournamentID);
			return ((ISingleResult<GetAverageTournamentRatingResult1>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAverageTournamentRating")]
		public ISingleResult<GetAverageTournamentRatingResult> GetAverageTournamentRating([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> tournamentID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tournamentID);
			return ((ISingleResult<GetAverageTournamentRatingResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Camp")]
	public partial class Camp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CampID;
		
		private System.Guid _UserID;
		
		private string _ImageSize;
		
		private System.DateTime _ExpirationDate;
		
		private string _URL;
		
		private System.Data.Linq.Binary _ImageSource;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampIDChanging(System.Guid value);
    partial void OnCampIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnImageSizeChanging(string value);
    partial void OnImageSizeChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnImageSourceChanging(System.Data.Linq.Binary value);
    partial void OnImageSourceChanged();
    #endregion
		
		public Camp()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CampID
		{
			get
			{
				return this._CampID;
			}
			set
			{
				if ((this._CampID != value))
				{
					this.OnCampIDChanging(value);
					this.SendPropertyChanging();
					this._CampID = value;
					this.SendPropertyChanged("CampID");
					this.OnCampIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSize", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ImageSize
		{
			get
			{
				return this._ImageSize;
			}
			set
			{
				if ((this._ImageSize != value))
				{
					this.OnImageSizeChanging(value);
					this.SendPropertyChanging();
					this._ImageSize = value;
					this.SendPropertyChanged("ImageSize");
					this.OnImageSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSource", DbType="VarBinary(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageSource
		{
			get
			{
				return this._ImageSource;
			}
			set
			{
				if ((this._ImageSource != value))
				{
					this.OnImageSourceChanging(value);
					this.SendPropertyChanging();
					this._ImageSource = value;
					this.SendPropertyChanged("ImageSource");
					this.OnImageSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Camp", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Camps.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Camps.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private System.Nullable<int> _Aspnet_ID;
		
		private EntitySet<Camp> _Camps;
		
		private EntitySet<CoachesCorner> _CoachesCorners;
		
		private EntitySet<Tournament> _Tournaments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnAspnet_IDChanging(System.Nullable<int> value);
    partial void OnAspnet_IDChanged();
    #endregion
		
		public User()
		{
			this._Camps = new EntitySet<Camp>(new Action<Camp>(this.attach_Camps), new Action<Camp>(this.detach_Camps));
			this._CoachesCorners = new EntitySet<CoachesCorner>(new Action<CoachesCorner>(this.attach_CoachesCorners), new Action<CoachesCorner>(this.detach_CoachesCorners));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aspnet_ID", DbType="Int")]
		public System.Nullable<int> Aspnet_ID
		{
			get
			{
				return this._Aspnet_ID;
			}
			set
			{
				if ((this._Aspnet_ID != value))
				{
					this.OnAspnet_IDChanging(value);
					this.SendPropertyChanging();
					this._Aspnet_ID = value;
					this.SendPropertyChanged("Aspnet_ID");
					this.OnAspnet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Camp", Storage="_Camps", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Camp> Camps
		{
			get
			{
				return this._Camps;
			}
			set
			{
				this._Camps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CoachesCorner", Storage="_CoachesCorners", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<CoachesCorner> CoachesCorners
		{
			get
			{
				return this._CoachesCorners;
			}
			set
			{
				this._CoachesCorners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tournament", Storage="_Tournaments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Camps(Camp entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Camps(Camp entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CoachesCorners(CoachesCorner entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CoachesCorners(CoachesCorner entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CmsData")]
	public partial class CmsData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CmsID;
		
		private string _Data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCmsIDChanging(string value);
    partial void OnCmsIDChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public CmsData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmsID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CmsID
		{
			get
			{
				return this._CmsID;
			}
			set
			{
				if ((this._CmsID != value))
				{
					this.OnCmsIDChanging(value);
					this.SendPropertyChanging();
					this._CmsID = value;
					this.SendPropertyChanged("CmsID");
					this.OnCmsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoachesCorner")]
	public partial class CoachesCorner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CoachesCornerID;
		
		private System.Guid _UserID;
		
		private System.Guid _RegionID;
		
		private string _AgeGroup;
		
		private string _Gender;
		
		private string _TeamName;
		
		private string _ClubName;
		
		private string _Description;
		
		private System.DateTime _DatePosted;
		
		private string _Contactname;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _Website;
		
		private System.DateTime _ExpirationDate;
		
		private string _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoachesCornerIDChanging(System.Guid value);
    partial void OnCoachesCornerIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnRegionIDChanging(System.Guid value);
    partial void OnRegionIDChanged();
    partial void OnAgeGroupChanging(string value);
    partial void OnAgeGroupChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnClubNameChanging(string value);
    partial void OnClubNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDatePostedChanging(System.DateTime value);
    partial void OnDatePostedChanged();
    partial void OnContactnameChanging(string value);
    partial void OnContactnameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    #endregion
		
		public CoachesCorner()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachesCornerID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CoachesCornerID
		{
			get
			{
				return this._CoachesCornerID;
			}
			set
			{
				if ((this._CoachesCornerID != value))
				{
					this.OnCoachesCornerIDChanging(value);
					this.SendPropertyChanging();
					this._CoachesCornerID = value;
					this.SendPropertyChanged("CoachesCornerID");
					this.OnCoachesCornerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeGroup", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AgeGroup
		{
			get
			{
				return this._AgeGroup;
			}
			set
			{
				if ((this._AgeGroup != value))
				{
					this.OnAgeGroupChanging(value);
					this.SendPropertyChanging();
					this._AgeGroup = value;
					this.SendPropertyChanged("AgeGroup");
					this.OnAgeGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClubName
		{
			get
			{
				return this._ClubName;
			}
			set
			{
				if ((this._ClubName != value))
				{
					this.OnClubNameChanging(value);
					this.SendPropertyChanging();
					this._ClubName = value;
					this.SendPropertyChanged("ClubName");
					this.OnClubNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePosted", DbType="Date NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this.OnDatePostedChanging(value);
					this.SendPropertyChanging();
					this._DatePosted = value;
					this.SendPropertyChanged("DatePosted");
					this.OnDatePostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contactname", DbType="VarChar(50)")]
		public string Contactname
		{
			get
			{
				return this._Contactname;
			}
			set
			{
				if ((this._Contactname != value))
				{
					this.OnContactnameChanging(value);
					this.SendPropertyChanging();
					this._Contactname = value;
					this.SendPropertyChanged("Contactname");
					this.OnContactnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CoachesCorner", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CoachesCorners.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CoachesCorners.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CountryID;
		
		private string _CountryName;
		
		private EntitySet<Region> _Regions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(System.Guid value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Region", Storage="_Regions", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Region> Regions
		{
			get
			{
				return this._Regions;
			}
			set
			{
				this._Regions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Raiting")]
	public partial class Raiting
	{
		
		private System.Guid _TournamentID;
		
		private System.Guid _UserID;
		
		private decimal _TournamentRaiting;
		
		public Raiting()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					this._TournamentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentRaiting", DbType="Decimal(5,2) NOT NULL")]
		public decimal TournamentRaiting
		{
			get
			{
				return this._TournamentRaiting;
			}
			set
			{
				if ((this._TournamentRaiting != value))
				{
					this._TournamentRaiting = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RegionID;
		
		private string _RegionName;
		
		private string _Image;
		
		private System.Guid _CountryID;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionIDChanging(System.Guid value);
    partial void OnRegionIDChanged();
    partial void OnRegionNameChanging(string value);
    partial void OnRegionNameChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnCountryIDChanging(System.Guid value);
    partial void OnCountryIDChanged();
    #endregion
		
		public Region()
		{
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="VarChar(50)")]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this.OnRegionNameChanging(value);
					this.SendPropertyChanging();
					this._RegionName = value;
					this.SendPropertyChanged("RegionName");
					this.OnRegionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Tournament", Storage="_Tournaments", ThisKey="RegionID", OtherKey="RegionID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Region", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Regions.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Regions.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(System.Guid);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tournament")]
	public partial class Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TournamentID;
		
		private System.Guid _RegionID;
		
		private System.Guid _UserID;
		
		private string _TournamentName;
		
		private string _TournamentLocation;
		
		private System.Nullable<System.DateTime> _TournamentDate;
		
		private System.Nullable<System.TimeSpan> _TournamentTime;
		
		private string _TournamentHostingClub;
		
		private string _TournamentAgeGroup;
		
		private System.Nullable<decimal> _TournamentTeamFee;
		
		private System.Nullable<System.DateTime> _TournamentRegistrationDeadline;
		
		private string _ContactName;
		
		private string _ContactNumber;
		
		private string _ContactEmail;
		
		private System.Nullable<bool> _IsPaidListing;
		
		private string _TournamentGender;
		
		private string _TournamentClubSite;
		
		private string _TournamentFormat;
		
		private string _TournamentImageUrl;
		
		private string _TournamentDescription;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTournamentIDChanging(System.Guid value);
    partial void OnTournamentIDChanged();
    partial void OnRegionIDChanging(System.Guid value);
    partial void OnRegionIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnTournamentNameChanging(string value);
    partial void OnTournamentNameChanged();
    partial void OnTournamentLocationChanging(string value);
    partial void OnTournamentLocationChanged();
    partial void OnTournamentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTournamentDateChanged();
    partial void OnTournamentTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTournamentTimeChanged();
    partial void OnTournamentHostingClubChanging(string value);
    partial void OnTournamentHostingClubChanged();
    partial void OnTournamentAgeGroupChanging(string value);
    partial void OnTournamentAgeGroupChanged();
    partial void OnTournamentTeamFeeChanging(System.Nullable<decimal> value);
    partial void OnTournamentTeamFeeChanged();
    partial void OnTournamentRegistrationDeadlineChanging(System.Nullable<System.DateTime> value);
    partial void OnTournamentRegistrationDeadlineChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnIsPaidListingChanging(System.Nullable<bool> value);
    partial void OnIsPaidListingChanged();
    partial void OnTournamentGenderChanging(string value);
    partial void OnTournamentGenderChanged();
    partial void OnTournamentClubSiteChanging(string value);
    partial void OnTournamentClubSiteChanged();
    partial void OnTournamentFormatChanging(string value);
    partial void OnTournamentFormatChanged();
    partial void OnTournamentImageUrlChanging(string value);
    partial void OnTournamentImageUrlChanged();
    partial void OnTournamentDescriptionChanging(string value);
    partial void OnTournamentDescriptionChanged();
    #endregion
		
		public Tournament()
		{
			this._Region = default(EntityRef<Region>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentName", DbType="VarChar(50)")]
		public string TournamentName
		{
			get
			{
				return this._TournamentName;
			}
			set
			{
				if ((this._TournamentName != value))
				{
					this.OnTournamentNameChanging(value);
					this.SendPropertyChanging();
					this._TournamentName = value;
					this.SendPropertyChanged("TournamentName");
					this.OnTournamentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentLocation", DbType="VarChar(50)")]
		public string TournamentLocation
		{
			get
			{
				return this._TournamentLocation;
			}
			set
			{
				if ((this._TournamentLocation != value))
				{
					this.OnTournamentLocationChanging(value);
					this.SendPropertyChanging();
					this._TournamentLocation = value;
					this.SendPropertyChanged("TournamentLocation");
					this.OnTournamentLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentDate", DbType="Date")]
		public System.Nullable<System.DateTime> TournamentDate
		{
			get
			{
				return this._TournamentDate;
			}
			set
			{
				if ((this._TournamentDate != value))
				{
					this.OnTournamentDateChanging(value);
					this.SendPropertyChanging();
					this._TournamentDate = value;
					this.SendPropertyChanged("TournamentDate");
					this.OnTournamentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> TournamentTime
		{
			get
			{
				return this._TournamentTime;
			}
			set
			{
				if ((this._TournamentTime != value))
				{
					this.OnTournamentTimeChanging(value);
					this.SendPropertyChanging();
					this._TournamentTime = value;
					this.SendPropertyChanged("TournamentTime");
					this.OnTournamentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentHostingClub", DbType="VarChar(50)")]
		public string TournamentHostingClub
		{
			get
			{
				return this._TournamentHostingClub;
			}
			set
			{
				if ((this._TournamentHostingClub != value))
				{
					this.OnTournamentHostingClubChanging(value);
					this.SendPropertyChanging();
					this._TournamentHostingClub = value;
					this.SendPropertyChanged("TournamentHostingClub");
					this.OnTournamentHostingClubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentAgeGroup", DbType="VarChar(50)")]
		public string TournamentAgeGroup
		{
			get
			{
				return this._TournamentAgeGroup;
			}
			set
			{
				if ((this._TournamentAgeGroup != value))
				{
					this.OnTournamentAgeGroupChanging(value);
					this.SendPropertyChanging();
					this._TournamentAgeGroup = value;
					this.SendPropertyChanged("TournamentAgeGroup");
					this.OnTournamentAgeGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentTeamFee", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TournamentTeamFee
		{
			get
			{
				return this._TournamentTeamFee;
			}
			set
			{
				if ((this._TournamentTeamFee != value))
				{
					this.OnTournamentTeamFeeChanging(value);
					this.SendPropertyChanging();
					this._TournamentTeamFee = value;
					this.SendPropertyChanged("TournamentTeamFee");
					this.OnTournamentTeamFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentRegistrationDeadline", DbType="Date")]
		public System.Nullable<System.DateTime> TournamentRegistrationDeadline
		{
			get
			{
				return this._TournamentRegistrationDeadline;
			}
			set
			{
				if ((this._TournamentRegistrationDeadline != value))
				{
					this.OnTournamentRegistrationDeadlineChanging(value);
					this.SendPropertyChanging();
					this._TournamentRegistrationDeadline = value;
					this.SendPropertyChanged("TournamentRegistrationDeadline");
					this.OnTournamentRegistrationDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(50)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="VarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaidListing", DbType="Bit")]
		public System.Nullable<bool> IsPaidListing
		{
			get
			{
				return this._IsPaidListing;
			}
			set
			{
				if ((this._IsPaidListing != value))
				{
					this.OnIsPaidListingChanging(value);
					this.SendPropertyChanging();
					this._IsPaidListing = value;
					this.SendPropertyChanged("IsPaidListing");
					this.OnIsPaidListingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentGender", DbType="VarChar(50)")]
		public string TournamentGender
		{
			get
			{
				return this._TournamentGender;
			}
			set
			{
				if ((this._TournamentGender != value))
				{
					this.OnTournamentGenderChanging(value);
					this.SendPropertyChanging();
					this._TournamentGender = value;
					this.SendPropertyChanged("TournamentGender");
					this.OnTournamentGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentClubSite", DbType="VarChar(50)")]
		public string TournamentClubSite
		{
			get
			{
				return this._TournamentClubSite;
			}
			set
			{
				if ((this._TournamentClubSite != value))
				{
					this.OnTournamentClubSiteChanging(value);
					this.SendPropertyChanging();
					this._TournamentClubSite = value;
					this.SendPropertyChanged("TournamentClubSite");
					this.OnTournamentClubSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentFormat", DbType="VarChar(50)")]
		public string TournamentFormat
		{
			get
			{
				return this._TournamentFormat;
			}
			set
			{
				if ((this._TournamentFormat != value))
				{
					this.OnTournamentFormatChanging(value);
					this.SendPropertyChanging();
					this._TournamentFormat = value;
					this.SendPropertyChanged("TournamentFormat");
					this.OnTournamentFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentImageUrl", DbType="VarChar(MAX)")]
		public string TournamentImageUrl
		{
			get
			{
				return this._TournamentImageUrl;
			}
			set
			{
				if ((this._TournamentImageUrl != value))
				{
					this.OnTournamentImageUrlChanging(value);
					this.SendPropertyChanging();
					this._TournamentImageUrl = value;
					this.SendPropertyChanged("TournamentImageUrl");
					this.OnTournamentImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TournamentDescription
		{
			get
			{
				return this._TournamentDescription;
			}
			set
			{
				if ((this._TournamentDescription != value))
				{
					this.OnTournamentDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TournamentDescription = value;
					this.SendPropertyChanged("TournamentDescription");
					this.OnTournamentDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Tournament", Storage="_Region", ThisKey="RegionID", OtherKey="RegionID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._RegionID = value.RegionID;
					}
					else
					{
						this._RegionID = default(System.Guid);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tournament", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetAllCampsBeforeDateResult
	{
		
		private System.Guid _CampID;
		
		private System.Guid _UserID;
		
		private string _ImageSize;
		
		private System.DateTime _ExpirationDate;
		
		private string _URL;
		
		private System.Data.Linq.Binary _ImageSource;
		
		public GetAllCampsBeforeDateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CampID
		{
			get
			{
				return this._CampID;
			}
			set
			{
				if ((this._CampID != value))
				{
					this._CampID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSize", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ImageSize
		{
			get
			{
				return this._ImageSize;
			}
			set
			{
				if ((this._ImageSize != value))
				{
					this._ImageSize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this._ExpirationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this._URL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSource", DbType="VarBinary(50) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ImageSource
		{
			get
			{
				return this._ImageSource;
			}
			set
			{
				if ((this._ImageSource != value))
				{
					this._ImageSource = value;
				}
			}
		}
	}
	
	public partial class GetFellowRegionsByRegionResult
	{
		
		private System.Guid _RegionID;
		
		private string _RegionName;
		
		private string _Image;
		
		private System.Guid _CountryID;
		
		public GetFellowRegionsByRegionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this._RegionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="VarChar(50)")]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this._RegionName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this._Image = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this._CountryID = value;
				}
			}
		}
	}
	
	public partial class GetAllCampsPostsByUserResult
	{
		
		private System.Guid _CampID;
		
		private System.Guid _UserID;
		
		private string _ImageSize;
		
		private System.DateTime _ExpirationDate;
		
		private string _URL;
		
		private System.Data.Linq.Binary _ImageSource;
		
		public GetAllCampsPostsByUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CampID
		{
			get
			{
				return this._CampID;
			}
			set
			{
				if ((this._CampID != value))
				{
					this._CampID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSize", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ImageSize
		{
			get
			{
				return this._ImageSize;
			}
			set
			{
				if ((this._ImageSize != value))
				{
					this._ImageSize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this._ExpirationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this._URL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSource", DbType="VarBinary(50) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ImageSource
		{
			get
			{
				return this._ImageSource;
			}
			set
			{
				if ((this._ImageSource != value))
				{
					this._ImageSource = value;
				}
			}
		}
	}
	
	public partial class GetAllCoachesCornerByRegionResult
	{
		
		private System.Guid _CoachesCornerID;
		
		private System.Guid _UserID;
		
		private System.Guid _RegionID;
		
		private string _AgeGroup;
		
		private string _Gender;
		
		private string _TeamName;
		
		private string _ClubName;
		
		private string _Description;
		
		private System.DateTime _DatePosted;
		
		private string _Contactname;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _Website;
		
		private System.DateTime _ExpirationDate;
		
		private string _City;
		
		public GetAllCoachesCornerByRegionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachesCornerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CoachesCornerID
		{
			get
			{
				return this._CoachesCornerID;
			}
			set
			{
				if ((this._CoachesCornerID != value))
				{
					this._CoachesCornerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this._RegionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeGroup", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AgeGroup
		{
			get
			{
				return this._AgeGroup;
			}
			set
			{
				if ((this._AgeGroup != value))
				{
					this._AgeGroup = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this._TeamName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClubName
		{
			get
			{
				return this._ClubName;
			}
			set
			{
				if ((this._ClubName != value))
				{
					this._ClubName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePosted", DbType="Date NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this._DatePosted = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contactname", DbType="VarChar(50)")]
		public string Contactname
		{
			get
			{
				return this._Contactname;
			}
			set
			{
				if ((this._Contactname != value))
				{
					this._Contactname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this._Website = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this._ExpirationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
	}
	
	public partial class GetAllCoachesCornerPostsByUserResult
	{
		
		private System.Guid _CoachesCornerID;
		
		private System.Guid _UserID;
		
		private System.Guid _RegionID;
		
		private string _AgeGroup;
		
		private string _Gender;
		
		private string _TeamName;
		
		private string _ClubName;
		
		private string _Description;
		
		private System.DateTime _DatePosted;
		
		private string _Contactname;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _Website;
		
		private System.DateTime _ExpirationDate;
		
		private string _City;
		
		public GetAllCoachesCornerPostsByUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachesCornerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CoachesCornerID
		{
			get
			{
				return this._CoachesCornerID;
			}
			set
			{
				if ((this._CoachesCornerID != value))
				{
					this._CoachesCornerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this._RegionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeGroup", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AgeGroup
		{
			get
			{
				return this._AgeGroup;
			}
			set
			{
				if ((this._AgeGroup != value))
				{
					this._AgeGroup = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this._TeamName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClubName
		{
			get
			{
				return this._ClubName;
			}
			set
			{
				if ((this._ClubName != value))
				{
					this._ClubName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePosted", DbType="Date NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this._DatePosted = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contactname", DbType="VarChar(50)")]
		public string Contactname
		{
			get
			{
				return this._Contactname;
			}
			set
			{
				if ((this._Contactname != value))
				{
					this._Contactname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this._Website = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this._ExpirationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
	}
	
	public partial class GetAllCountriesResult
	{
		
		private string _CountryName;
		
		public GetAllCountriesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this._CountryName = value;
				}
			}
		}
	}
	
	public partial class GetAllRegionsByCountryResult
	{
		
		private string _RegionName;
		
		private string _Image;
		
		public GetAllRegionsByCountryResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="VarChar(50)")]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this._RegionName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this._Image = value;
				}
			}
		}
	}
	
	public partial class GetAllTournamentPostsByUserResult
	{
		
		private System.Guid _TournamentID;
		
		private System.Guid _RegionID;
		
		private System.Guid _UserID;
		
		private string _TournamentName;
		
		private string _TournamentLocation;
		
		private System.Nullable<System.DateTime> _TournamentDate;
		
		private System.Nullable<System.TimeSpan> _TournamentTime;
		
		private string _TournamentHostingClub;
		
		private string _TournamentAgeGroup;
		
		private System.Nullable<decimal> _TournamentTeamFee;
		
		private System.Nullable<System.DateTime> _TournamentRegistrationDeadline;
		
		private string _ContactName;
		
		private string _ContactNumber;
		
		private string _ContactEmail;
		
		private System.Nullable<bool> _IsPaidListing;
		
		private string _TournamentGender;
		
		private string _TournamentClubSite;
		
		private string _TournamentFormat;
		
		private string _TournamentImageUrl;
		
		private string _TournamentDescription;
		
		public GetAllTournamentPostsByUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					this._TournamentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this._RegionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentName", DbType="VarChar(50)")]
		public string TournamentName
		{
			get
			{
				return this._TournamentName;
			}
			set
			{
				if ((this._TournamentName != value))
				{
					this._TournamentName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentLocation", DbType="VarChar(50)")]
		public string TournamentLocation
		{
			get
			{
				return this._TournamentLocation;
			}
			set
			{
				if ((this._TournamentLocation != value))
				{
					this._TournamentLocation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentDate", DbType="Date")]
		public System.Nullable<System.DateTime> TournamentDate
		{
			get
			{
				return this._TournamentDate;
			}
			set
			{
				if ((this._TournamentDate != value))
				{
					this._TournamentDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> TournamentTime
		{
			get
			{
				return this._TournamentTime;
			}
			set
			{
				if ((this._TournamentTime != value))
				{
					this._TournamentTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentHostingClub", DbType="VarChar(50)")]
		public string TournamentHostingClub
		{
			get
			{
				return this._TournamentHostingClub;
			}
			set
			{
				if ((this._TournamentHostingClub != value))
				{
					this._TournamentHostingClub = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentAgeGroup", DbType="VarChar(50)")]
		public string TournamentAgeGroup
		{
			get
			{
				return this._TournamentAgeGroup;
			}
			set
			{
				if ((this._TournamentAgeGroup != value))
				{
					this._TournamentAgeGroup = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentTeamFee", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TournamentTeamFee
		{
			get
			{
				return this._TournamentTeamFee;
			}
			set
			{
				if ((this._TournamentTeamFee != value))
				{
					this._TournamentTeamFee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentRegistrationDeadline", DbType="Date")]
		public System.Nullable<System.DateTime> TournamentRegistrationDeadline
		{
			get
			{
				return this._TournamentRegistrationDeadline;
			}
			set
			{
				if ((this._TournamentRegistrationDeadline != value))
				{
					this._TournamentRegistrationDeadline = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this._ContactName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(50)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this._ContactNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="VarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this._ContactEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaidListing", DbType="Bit")]
		public System.Nullable<bool> IsPaidListing
		{
			get
			{
				return this._IsPaidListing;
			}
			set
			{
				if ((this._IsPaidListing != value))
				{
					this._IsPaidListing = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentGender", DbType="VarChar(50)")]
		public string TournamentGender
		{
			get
			{
				return this._TournamentGender;
			}
			set
			{
				if ((this._TournamentGender != value))
				{
					this._TournamentGender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentClubSite", DbType="VarChar(50)")]
		public string TournamentClubSite
		{
			get
			{
				return this._TournamentClubSite;
			}
			set
			{
				if ((this._TournamentClubSite != value))
				{
					this._TournamentClubSite = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentFormat", DbType="VarChar(50)")]
		public string TournamentFormat
		{
			get
			{
				return this._TournamentFormat;
			}
			set
			{
				if ((this._TournamentFormat != value))
				{
					this._TournamentFormat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentImageUrl", DbType="VarChar(MAX)")]
		public string TournamentImageUrl
		{
			get
			{
				return this._TournamentImageUrl;
			}
			set
			{
				if ((this._TournamentImageUrl != value))
				{
					this._TournamentImageUrl = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TournamentDescription
		{
			get
			{
				return this._TournamentDescription;
			}
			set
			{
				if ((this._TournamentDescription != value))
				{
					this._TournamentDescription = value;
				}
			}
		}
	}
	
	public partial class GetAllTournamentsByRegionResult
	{
		
		private System.Guid _TournamentID;
		
		private System.Guid _RegionID;
		
		private System.Guid _UserID;
		
		private string _TournamentName;
		
		private string _TournamentLocation;
		
		private System.Nullable<System.DateTime> _TournamentDate;
		
		private System.Nullable<System.TimeSpan> _TournamentTime;
		
		private string _TournamentHostingClub;
		
		private string _TournamentAgeGroup;
		
		private System.Nullable<decimal> _TournamentTeamFee;
		
		private System.Nullable<System.DateTime> _TournamentRegistrationDeadline;
		
		private string _ContactName;
		
		private string _ContactNumber;
		
		private string _ContactEmail;
		
		private System.Nullable<bool> _IsPaidListing;
		
		private string _TournamentGender;
		
		private string _TournamentClubSite;
		
		private string _TournamentFormat;
		
		private string _TournamentImageUrl;
		
		private string _TournamentDescription;
		
		public GetAllTournamentsByRegionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					this._TournamentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this._RegionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentName", DbType="VarChar(50)")]
		public string TournamentName
		{
			get
			{
				return this._TournamentName;
			}
			set
			{
				if ((this._TournamentName != value))
				{
					this._TournamentName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentLocation", DbType="VarChar(50)")]
		public string TournamentLocation
		{
			get
			{
				return this._TournamentLocation;
			}
			set
			{
				if ((this._TournamentLocation != value))
				{
					this._TournamentLocation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentDate", DbType="Date")]
		public System.Nullable<System.DateTime> TournamentDate
		{
			get
			{
				return this._TournamentDate;
			}
			set
			{
				if ((this._TournamentDate != value))
				{
					this._TournamentDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> TournamentTime
		{
			get
			{
				return this._TournamentTime;
			}
			set
			{
				if ((this._TournamentTime != value))
				{
					this._TournamentTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentHostingClub", DbType="VarChar(50)")]
		public string TournamentHostingClub
		{
			get
			{
				return this._TournamentHostingClub;
			}
			set
			{
				if ((this._TournamentHostingClub != value))
				{
					this._TournamentHostingClub = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentAgeGroup", DbType="VarChar(50)")]
		public string TournamentAgeGroup
		{
			get
			{
				return this._TournamentAgeGroup;
			}
			set
			{
				if ((this._TournamentAgeGroup != value))
				{
					this._TournamentAgeGroup = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentTeamFee", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TournamentTeamFee
		{
			get
			{
				return this._TournamentTeamFee;
			}
			set
			{
				if ((this._TournamentTeamFee != value))
				{
					this._TournamentTeamFee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentRegistrationDeadline", DbType="Date")]
		public System.Nullable<System.DateTime> TournamentRegistrationDeadline
		{
			get
			{
				return this._TournamentRegistrationDeadline;
			}
			set
			{
				if ((this._TournamentRegistrationDeadline != value))
				{
					this._TournamentRegistrationDeadline = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this._ContactName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(50)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this._ContactNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="VarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this._ContactEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaidListing", DbType="Bit")]
		public System.Nullable<bool> IsPaidListing
		{
			get
			{
				return this._IsPaidListing;
			}
			set
			{
				if ((this._IsPaidListing != value))
				{
					this._IsPaidListing = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentGender", DbType="VarChar(50)")]
		public string TournamentGender
		{
			get
			{
				return this._TournamentGender;
			}
			set
			{
				if ((this._TournamentGender != value))
				{
					this._TournamentGender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentClubSite", DbType="VarChar(50)")]
		public string TournamentClubSite
		{
			get
			{
				return this._TournamentClubSite;
			}
			set
			{
				if ((this._TournamentClubSite != value))
				{
					this._TournamentClubSite = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentFormat", DbType="VarChar(50)")]
		public string TournamentFormat
		{
			get
			{
				return this._TournamentFormat;
			}
			set
			{
				if ((this._TournamentFormat != value))
				{
					this._TournamentFormat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentImageUrl", DbType="VarChar(MAX)")]
		public string TournamentImageUrl
		{
			get
			{
				return this._TournamentImageUrl;
			}
			set
			{
				if ((this._TournamentImageUrl != value))
				{
					this._TournamentImageUrl = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TournamentDescription
		{
			get
			{
				return this._TournamentDescription;
			}
			set
			{
				if ((this._TournamentDescription != value))
				{
					this._TournamentDescription = value;
				}
			}
		}
	}
	
	public partial class GetCmsDataResult
	{
		
		private string _Data;
		
		public GetCmsDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this._Data = value;
				}
			}
		}
	}
	
	public partial class GetTournamentRaitingFromUserResult
	{
		
		private decimal _TournamentRaiting;
		
		public GetTournamentRaitingFromUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentRaiting", DbType="Decimal(5,2) NOT NULL")]
		public decimal TournamentRaiting
		{
			get
			{
				return this._TournamentRaiting;
			}
			set
			{
				if ((this._TournamentRaiting != value))
				{
					this._TournamentRaiting = value;
				}
			}
		}
	}
	
	public partial class GetAverageTournamentRatingResult1
	{
		
		private System.Nullable<decimal> _AverageRaiting;
		
		public GetAverageTournamentRatingResult1()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageRaiting", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> AverageRaiting
		{
			get
			{
				return this._AverageRaiting;
			}
			set
			{
				if ((this._AverageRaiting != value))
				{
					this._AverageRaiting = value;
				}
			}
		}
	}
	
	public partial class GetAverageTournamentRatingResult
	{
		
		private System.Nullable<decimal> _AverageRaiting;
		
		private System.Nullable<int> _NumberOfVotes;
		
		public GetAverageTournamentRatingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageRaiting", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> AverageRaiting
		{
			get
			{
				return this._AverageRaiting;
			}
			set
			{
				if ((this._AverageRaiting != value))
				{
					this._AverageRaiting = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfVotes", DbType="Int")]
		public System.Nullable<int> NumberOfVotes
		{
			get
			{
				return this._NumberOfVotes;
			}
			set
			{
				if ((this._NumberOfVotes != value))
				{
					this._NumberOfVotes = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
